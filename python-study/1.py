#***   数   ***

#足し算
print("1 + 1 =", 1 + 1) #2
#引き算
print("10 - 7 =", 10 - 7) #3
#掛け算
print("2 * 2 =", 2 * 2) #4
#割り算
print("1 / 3 =", 1 / 3) #0.3333333333333333
#割り算の商
print("5 // 3 =",5 // 3) #1
#割り算の余
print("5 % 3 =", 5 % 3) #2
#べき乗
print("5 ** 2 =", 5 ** 2) #25

print(" ") #改行

#演算の優先順位は日常生活のそれと同じ
print(50 - 5 * 6 / 4)
#優先順位が分かりづらいときは積極的に () を利用する
print(50 - ((5 * 6) / 4))

#=(等号)は変数に値を代入するときに使う
width = 20
height = 5 * 9
print(width * height)
#900

#aとbに10が代入される
a = b = 10  #これは, a = 10, b = 10と同義？
print(a, b)
#10 10

#c = 10, d = 11と同値になる
c, d = 10, 11
print(c, d)
#10 11

#nはここではまだ未定義(まだ値が代入されていない)
#n #変数が定義されていない場合, その変数を使おうとするとエラーが出る


#widthもheightも定義済み
n = width * height 
print(n)
#900

print(" ") #改行

#大文字の変数は定数として扱う慣習がある
PI = 3.14

#ただし実際の定数ではないので、変更してもエラーにはならない
PI = 3


#***   真偽値   ***
#演算子    例        結果
#or       x or y    xが偽ならy, そうでなければx
#and      x and y   xが偽ならx, そうでなければy
#not      not x     xが偽ならTrue, そうでなければFalse
#and は or より優先される
print(False and True or True)

#これは以下の結果と同じ意味になる
print((False and True) or True)

print(" ") #改行

#***   比較演算子   ***
#演算子     例          意味
# <        x < y       x は y より小さい
# >        x > y       x は y より大きい
# <=       x <= y      x は y以下
# >=       x >= y      x は y以上
# ==       x == y      x と yは同値
# !=       x != y      x と yは同値でない
# is       x is y      xとyは同じidである,xとyは同一である
# is not   x is not y  xとyは同じidでない,xとyは同一でない
# in       x in y      xはyに含まれる
# not in   x not in y  xはyに含まれない

print("1 < 2 =", 1 < 2)
#1 < 2 = True
print("1 > 2 =", 1 > 2)
#1 > 2 = False
print("1 <= 2 =",1 <= 2)
#1 <= 2 = True
print("1 <= 1 =", 1 <= 1)
#1 <= 1 = True
print("1 == 1 =", 1 == 1)
#1 == 1 = True
print("1 != 1 =", 1 != 1)
#1 != 1 = False

print(" ") #改行

#isのコードを書いてみる
#Pythonでは全ての物について一意のidというものを持っています.
#これは id() 関数を使って調べることができます。
print(id(1))
print(id(2))
print(id("abc")) #""で囲うと文字列という意味になる
print(id("hoge"))

print(" ") #改行

#これは変数を使っても同じように確認することができる
x = 1
print(id(x))

#上の例では id(x) と id(1) が同じ値になっているのが確認できる.
#このidが同じかどうかを比較するのが, is, is not になる.

#==(同値) と is(同一), 数値の場合は判定結果が同じになる時がある
x = 1
y = 1
print(id(x) == id(y))
print(x == y)

print(" ") #改行

#逆に, 中身は同じなのにidが異なる場合もある
x = "hoge"
y = "hoge"
print(x == y) #値は同じ
print(x is y) #idは異なる
print(id(x), id(y)) #それぞれのidを出力する

#idが同じ || 異なるかどうかがわかると何が嬉しいかということは実際に使う時に説明しますが
#ここではidというものがあり中身の値が同じでもidが違う時もあるということを頭の片隅においておけば大丈夫.