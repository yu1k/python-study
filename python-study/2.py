#***   文字列   ***

#Pythonで文字列を作るには, ' (シングルクォーテーション)もしくは, " (ダブルクォーテーション)で囲む.
print('some eggs')
print("some eggs")
print('some eggs\nsome eggs')

#a == b は aとb同値であればTrue, そうでなければFalseを返す演算子です
print('some eggs' == "some eggs") #True

#'...' の中で ' ,または "..." の中で " を使う場合には,
#各記号のまえに \ (バックスラッシュ) を入力する.
print("I don't Know him") #I don't know him
print('"Python"') #"Python"

print("I don\'t know him") #I don't know him
print("\"Python\"") #"Python"

#\nは改行文字を表す. \nは一文字として扱われる.
print("一行目\n二行目")
#一行目
#二行目

#\nを改行文字としてではなく,
#バックスラッシュ+nという文字列として使いたい場合は\\nと入力するか,
#引用符の前にrをつけます.
print("一行目\\n二行目")
#一行目\n二行目
print(r"一行目\n二行目")
#一行目\n二行目

#複数行の文字列を作りたいときは,
#三連引用符（"""...""" または ''' ... '''）を利用する.
#改行は自動で含まれますが, 行末に \ を付けることで改行を無視することができる
print("""改行あり
改行\
なし""")
#改行あり
#改行なし

#文字列にも演算子がある.
#+は文字列を連結して1つの文字列を作る.
print("a lot of" + " eggs")
#a lot of eggs

#* は文字列を繰り返します
print("Python" * 3)
#PythonPythonPython

#文字列も変数に代入して使うことができる.
first_name = "太郎"
last_name = "ドワンゴ"
print(first_name + last_name)
#太郎ドワンゴ


#***   インデックス, スライス   ***
#文字列は添字表記,
#(インデックス表記, つまり, ある文字列の何文字目かを指定)することができる.
#最初の文字は 0番目になる.
word = "Python"
print(word)
#Python

#インデックスの指定には[]を使用します.
#1文字目(0番目)
print(word[0])
#P

#5文字目(4番目)
print(word[4])
#o

#添字には負の数を指定するこもでき,
#その場合は右から数えます. ただし, 0と-0は等しいので, 負の添字は-1から始まることに注意する.
#最終文字
print(word[-1])
#n

#後ろから2文字目
print(word[-2])
#o

#まとめると正のインデックスと負のインデックスの関係は以下のようになる.
#               P  y  t  h  o  n
#正のインデックス  0  1  2  3  4  5
#負のインデックス -0 -5 -4 -3 -2 -1

#上の例にもあるように, oという文字は正のインデックスでは4番目, 負のインデックスでは, -2番目になる.

#文字列のi番目からj番目までというように一部を切り出して取得することもできます. これをスライスと呼ぶ.

#以下の例では, 0番目から1番目の文字列を取り出します.

#終端の添字は1つ大きいことに注意する.
#つまり開始番目の文字は含まれ, 終了番目は文字は列に含まれない(終了番目の1つ前まで取り出される)
print(word[0:2])
#Py

#開始番目を省略すると0とみなされます.
#先頭から2番目まで
print(word[:3])
#Pyt

#逆に終了添字を省略すると文字列の最後までとみなされます.
#3番目から最後まで
print(word[3:])
#hon

print(word[:3] + word[3:])
#Python

#文字列の長さより大きい番目を指定した場合は範囲外エラーが発生します.
#print(word[42])

#文字列の長さの取得にはlen()関数を使います.
print("length:", len(word))
#length: 6

#ただし, スライスを利用した場合はエラーは発生せず適切に処理されます.
print(word[4:42])
#on

#またPythonの文字列は後から変更することができません.
#word[0] = "J"

#文字列の変更をするためには, 例えば修正したい文字列を再定義し直します.
#1文字目をJにして, 以降はword[1:]を使う
word = "J" + word[1:]
print(word)
#Jython


#***   Format   ***
#ここでは文字列を特定のフォーマットで出力する方法を見ていきます.
#print()関数を使って文字と数値などを同時に表示したいということがあると思います.

#Pythonではそのような場合,
#フォーマット済み文字列リテラル(f-string)というのを利用する.
#名前が大げさですが, これは文字列を作るときに接頭辞としてfまたはFを付けることで生成される文字列である.
#これらの文字列には波括弧{}を使って変数や式を埋め込むことができる.

#下の例では{word}の部分を変数wordの内容で置き換える.
word = "Python"
print(f"Hello {word}")
#Hello Python

#{}の中では変数だけでなくPythonの気泡をそのまま使うことができます.
print(f"length: {len(word)}")
#length: 6
print(f"slice: {word[:2]}")
#slice: Py

#また数値であれば小数点以下の表示する桁数, 桁を揃えるために0や空白で埋める,
#配置を中央に揃えるなど様々なフォーマットの文字列を作成することができる.
pi = 3.14159265359
#そのまま表示
print(f"πの値は{pi}です")
#πの値は3.14159265359です

#小数点以下2桁まで
print(f"πの値は{pi:.2f}です")
#πの値は3.14です

#最大10桁で不足分は空白で埋める
print(f"πの値は{pi:10.2f}です")
#πの値は      3.14です

#最大5桁で不足分は0で埋める
print(f"πの値は{pi:05.2f}です")
#πの値は03.14です

#右寄せ 空白埋め
print(f"'{word:>10s}'")
#'    Python'

#中央揃え
print(f"'{word:^10s}'")
#'  Python  '